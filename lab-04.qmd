---
title: "Lab 04: Scaffolding reproducible research"
author: "Sicheng Wang"
format:
  pdf:
    number-sections: true
    toc: true
    toc-depth: 1
---

<!-- Summary
Great job. You've really done a lot of research on your own. Your content is very well organized and you've done a great job of integrating your understanding of reproducible research and Git and GitHub into practical situations. Keep up the great work!
-->

# Reproducible research
## What is reproducible research?

*    **Reproducible Research**
In academic setting,  reproducible research refers to work that can be replicated by other scholars following the steps outlined in the `Methodology` part, resulting in the same results as the original author. As outlined in [Recipe #4](https://qtalr.github.io/qtalrkit/articles/recipe-4.html), the concept of reproducible research specifically refers to reproducible projects, which aims to mitigate the impact of varying computing environments by documenting every step, typically through files like a README file outlining the project's objectives and production steps, as well as a DESCRIPTION file detailing the computing environment and packages utilized. This approach is particularly valuable for collaborative work, as it allows others to test the reproducibility and applicability of the work across different settings.

*    **Computing Environment and Project Structure**
The computing environment includes hardware (see @fig-1), the operating system (see @fig-2), and apps (see @fig-3), whereas the project structure refers to the files and folders contained in our project.

```{r}
#| label: fig-1
#| fig-cap: "Computer Hardware from [javaTpoint](https://www.javatpoint.com/computer-hardware-definition)"
#| echo: false
#| message: false

library(knitr)

knitr::include_graphics("computer_hardware.png")
```

```{r}
#| label: fig-2
#| fig-cap: "Operating System from [Welcome to CS](https://runestone.academy/ns/books/published/welcomecs2/operating-systems_operating-systems-varieties.html)"
#| echo: false
#| message: false

knitr::include_graphics("operating_system.png")
```

```{r}
#| label: fig-3
#| fig-cap: "Computer Hardware from [CODERUS](https://www.coderus.com/software-101-a-complete-guide-to-the-different-types-of-software/)"
#| echo: false
#| message: false

knitr::include_graphics("apps.png")
```

*    **Git and GitHub**
Git is an app which download in individual' computer which could be used to track changes in your local repositories while Github is a web-based which allows individuals to share repositories. When connecting them by RStudio, the repository one made could upload to one's GitHub account to let others get it by cloning to their own computers or forking to their GitHub account. And people who cloning or forking others' repositories could also editing in their own computer or in their GitHub account which would not influence the original author's repository. They could use Git app to upload(push) to their own forking repository or replacing the original one if the original author permit that through pull request. Besides, the tracking function of Git makes the changes available to individuals by committing button. Under the repository in GitHub, one could also report issues which shows the interactive function of GitHub. Though the above functions, GitHub and Git help our project be more reproducible.

## Why it is important for modern science?

*    **In academic**, research is interconnected; scholars build upon previous studies. Moreover, interactions among scholars worldwide are becoming increasingly common. Reproducible studies facilitate the review of others' work and enable scholars to offer more informed suggestions by validating previous research. Additionally, reproducible research can help prevent academic misconduct. For scholars collaborating with peers, reproducible research aids in tracking each others' edits and contributions.

*    **For the general public involved in projects**, reproducible research simplifies collaboration, particularly in light of recent significant shifts in work patterns where remote work has become prevalent. With reproducible research, individuals can collaborate more efficiently regardless of their location, enabling them to work remotely with ease.

# Project management (Taking Lab-04 Repository as an Example)
## Forking
In GitHub, if you want to copy someone else's repository without downloading it to your local computer, you utilize the `fork` option located below the repository, as shown in @fig-4:

```{r}
#| label: fig-4
#| fig-cap: "Fork"
#| echo: false
#| message: false

knitr::include_graphics("fork.png")
```

## Cloning
When you choose to download repositories from GitHub, whether they are owned by you or shared by others, you can use the `clone` option, as depicted below in @fig-5:

```{r}
#| label: fig-5
#| fig-cap: "Clone"
#| echo: false
#| message: false

knitr::include_graphics("clone.png")
```

## Editing
Then, we can make modifications to the cloned repository on our computer, such as adjusting file content, adding or deleting files, and performing other actions according to the aims of our project.

## Committing
After making adjustments to your local repository, you may want to save your changes. While you can use `Render on Save` for immediate saving, for long-term projects, you might want to revert to earlier versions. In such cases, you would utilize the `commit` function, which helps track changes, especially during collaboration with others. This function is facilitated by Git. Below is where you can find `commit` when working with the project in RStudio, see @fig-6:

```{r}
#| label: fig-6
#| fig-cap: "Commit"
#| echo: false
#| message: false

knitr::include_graphics("commit.png")
```

You can also provide a `commit message` to remind yourself of the changes made in one specific version, as shown in @fig-7:

```{r}
#| label: fig-7
#| fig-cap: "Commit Message"
#| echo: false
#| message: false

knitr::include_graphics("commit_message.png")
```

P.S.

*    The symbol `?`  indicates that the file does not exist in the repository you cloned from GitHub.
*    `M` indicates that the file exists in the original repository but has been modified by you.

## Pushing
This step is for individuals who want to update the original repository on GitHub. This is particularly useful when you want to ensure that the repository you have shared with others is up-to-date, or when you are collaborating with others. The `push` button allows you to upload the revised local repository to your GitHub account. In RStudio's Git pane, you can find the `push` button, as shown in @fig-8:

```{r}
#| label: fig-8
#| fig-cap: "Push"
#| echo: false
#| message: false
knitr::include_graphics("push.png")
```

## Previous Methods [Scenario A](https://qtalr.github.io/qtalrkit/articles/recipe-4.html)
See in @fig-9:

```{r}
#| label: fig-9
#| fig-cap: "Scenario A"
#| echo: false
#| message: false
knitr::include_graphics("Scenario_A.png")
```

# Assessment
## What did you learn?
*    Reproducible projects entail both the computing environment (hardware, operating system, and software) and the project structure (organization of files and folders within the project).

*    To ensure reproducibility in our projects, it's essential to include basic information such as the project's purpose, the source of data, the packages installed in the project, and so on.

*    A repository is a managed project, while a corpus is a collection of samples that may include diverse variables.

*    Git and GitHub serve to backup and share projects, enhancing the reproducibility of our work. Git is an application downloaded onto a computer to track changes in local repositories, while GitHub is website-based for sharing remote repositories with others.

*    Several features offered by Github and Git: clone (to copy the repository to the local computer), fork (to copy the repository to the GitHub account), commit (to track changes made on the local computer), push (to upload the revised local repository to the repository in the GitHub account), and pull request (to request replacing others' original repository on GitHub by pushing your revised local repository).

## What did you find most/ least challenging?
I find [Lab-04](https://github.com/lin-380-s24/lab-04) to be relatively straightforward compared to previous labs, although the most challenging aspect for me was pushing my revised local repository to my GitHub account. Initially, I encountered an error message stating `The requested URL returned error`. With assistance from the professor, I was able to resolve this issue by reconnecting my GitHub account with my Git account through RStudio. However, prior to today's class, I mistakenly believed that I needed to use `Git Bash` to change my Git username and set my email address, which left me confused. Now I understand that I can change my username through RStudio's terminal pane.

## What resources did you consult?
*    For question one - the inability to push my local repository to my GitHub account, I sought assistance from ChatGPT and the professor. ChatGPT suggested four potential issues: credential problems, authorization problems, operating system (OS) issues, and spelling errors. However, I was unsure which one I was experiencing, so I followed the professor's advice to reconnect my Git account and GitHub account, which ultimately resolved the issue for me.
<!-- Something to note: your computer may be Windows, but the RStudio you are running is in Docker which is a Linux operating system. So if you do search for answers pertaining to system-level things, you need to specify Linux. -->
*    For the second question - changing my Git username and adding an email address in Git, I attempted to find a solution by watching a video titled [How to Install and Configure Git and GitHub on Windows 11](https://www.youtube.com/watch?v=AdzKzlp66sQ&t=700s). However, the video used an app called `test.js` during the process, which I felt might not be suitable for my situation. As a result, I decided to wait until the professor covered this topic in today's class.

## What more would you like to know about reproducible research and/ or Git and GitHub?

<!-- You've been doing a lot of great research on your own. This is excellent! You've also demonstrated a good ability to distinguish between relevant and non-relevant resources. -->

Yesterday, when I checked today's [Lab-04](https://github.com/lin-380-s24/lab-04), I noticed something related to `creating issues` in the repository. However, when I forked the repository to my GitHub account, I couldn't find the `issues` tab, only the `pull requests` tab was visible. To gain clarity, I watched a video titled  [Creating issues in GitHub Projects](https://www.youtube.com/watch?v=-xM2MT0Nv8k&t=17s), hoping it would provide insight into locating the `issues` tab, even though it primarily focused on creating issues in GitHub Projects. Unfortunately, the video didn't address the issue directly because it directly went to this page, as shown in @fig-10. Then, I continued my search and found that `pull requests` are closely related to `issues` when I conducted a Google search, as shown in @fig-11. By clicking on the `pull requests` tab in my GitHub account, I accidentally stumbled upon the `issues` tab, as seen in @fig-12. Additionally, I was curious about some basic functions of GitHub, so I watched a tutorial titled [GitHub Tutorial](https://www.youtube.com/watch?v=iv8rSLsi1xo). However, this tutorial primarily focused on downloading the GitHub desktop app to connect to a remote repository in the GitHub web interface, which differs from what we learned using Git. It also covered how to create a remote repository in GitHub, similar to  [Scenario C](https://qtalr.github.io/qtalrkit/articles/recipe-4.html). However, it didn't delve into functions such as discussions, pull requests, or issues.

```{r}
#| label: fig-10
#| fig-cap: "The Screenshot"
#| echo: false
#| message: false
knitr::include_graphics("screenshot.png")
```

```{r}
#| label: fig-11
#| fig-cap: "Google Search"
#| echo: false
#| message: false
knitr::include_graphics("issues.png")
```

```{r}
#| label: fig-12
#| fig-cap: "Issues"
#| echo: false
#| message: false
knitr::include_graphics("issues_GitHub.png")
```
